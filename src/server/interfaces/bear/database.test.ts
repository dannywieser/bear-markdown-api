import { Database, open } from 'sqlite'
import * as sqlite3 from 'sqlite3'

import { loadConfig } from '../../../config'
import { asMock, mockConfig } from '../../../testing-support'
import { backupFile, backupPrune, dateWithHour } from '../../../util'
import { backupBearDatabase, loadDatabase } from './database'

jest.mock('sqlite')
jest.mock('sqlite3')
jest.mock('@/util')
jest.mock('@/config')

const mockDb = { db: true } as unknown as Database
//const mockBackupFile = '/mock/path/to/backup.sqlite'
//const config = mockConfig()

beforeEach(() => {
  asMock(open).mockResolvedValue(mockDb)
  // asMock(loadConfig).mockReturnValue(config)
  asMock(dateWithHour).mockReturnValue('20240101-11')
})

describe('bear database functions', () => {
  // test('loadDatabase invokes the sqlite open function', async () => {
  //   const db = await loadDatabase(mockBackupFile)
  //   expect(open).toHaveBeenCalledWith({
  //     driver: sqlite3.Database,
  //     filename: mockBackupFile,
  //   })
  //   expect(db).toBe(mockDb)
  // })
  // test('backupBearDatabase calls backupFile with correct arguments', () => {
  //   backupBearDatabase()
  //   expect(backupFile).toHaveBeenCalledWith(
  //     '/path/to/beardb',
  //     '/mock/root/bear-backups',
  //     'bear-backup-20240101-11.sqlite'
  //   )
  // })
  // test('backupBearDatabase calls backupPrune with correct arguments', () => {
  //   backupBearDatabase()
  //   expect(backupPrune).toHaveBeenCalledWith('bear-backup-', '/mock/root/bear-backups', 2)
  // })
  // test('returns the backup file path generated by the backupFile function', () => {
  //   asMock(backupFile).mockReturnValue('/backup/target/path')
  //   const result = backupBearDatabase()
  //   expect(result).toMatch('/backup/target/path')
  // })
})
