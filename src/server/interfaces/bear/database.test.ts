import { Database, open } from 'sqlite'
import * as sqlite3 from 'sqlite3'

import { asMock, mockConfig } from '../../../testing-support'
import { backupFile, backupPrune, createDir, dateWithHour, expandPath } from '../../../util'
import { backupBearDatabase, loadDatabase } from './database'

jest.mock('sqlite')
jest.mock('sqlite3')
jest.mock('../../../util')

const mockDb = { db: true } as unknown as Database
const mockBackupFile = '/mock/path/to/backup.sqlite'

beforeEach(() => {
  asMock(open).mockResolvedValue(mockDb)

  asMock(dateWithHour).mockReturnValue('20240101-11')
  asMock(expandPath).mockReturnValue('/expanded/db/path')
})

describe('bear database functions', () => {
  test('loadDatabase invokes the sqlite open function', async () => {
    const db = await loadDatabase(mockBackupFile)

    expect(open).toHaveBeenCalledWith({
      driver: sqlite3.Database,
      filename: mockBackupFile,
    })
    expect(db).toBe(mockDb)
  })
  test('creates the directory for the backups', () => {
    const config = mockConfig()

    backupBearDatabase(config)

    expect(createDir).toHaveBeenCalledWith('/mock/root/bear-backups')
  })
  test('backupBearDatabase calls backupFile with correct arguments', () => {
    const config = mockConfig()

    backupBearDatabase(config)

    expect(backupFile).toHaveBeenCalledWith(
      '/expanded/db/path/dbfile.sqlite',
      '/mock/root/bear-backups',
      'bear-backup-20240101-11.sqlite'
    )
  })
  test('backupBearDatabase calls backupPrune with correct arguments', () => {
    const config = mockConfig()

    backupBearDatabase(config)

    expect(backupPrune).toHaveBeenCalledWith('bear-backup-', '/mock/root/bear-backups', 2)
  })

  test('returns the backup file path generated by the backupFile function', () => {
    const config = mockConfig()
    asMock(backupFile).mockReturnValue('/backup/target/path')

    const result = backupBearDatabase(config)

    expect(result).toMatch('/backup/target/path')
  })
})
